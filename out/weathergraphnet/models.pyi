import torch
from _typeshed import Incomplete
from torch import nn
from torch_geometric.data import Data as Data
from typing import List, Tuple
from weathergraphnet.utils import setup_logger as setup_logger

logger: Incomplete

class BaseNet(nn.Module):
    activation: Incomplete
    channels_in: Incomplete
    channels_out: Incomplete
    hidden_size: Incomplete
    def __init__(self, channels_in: int, channels_out: int, hidden_size: int) -> None: ...
    def forward(self, x) -> None: ...

class Encoder(BaseNet):
    conv_layers: Incomplete
    def __init__(self, channels_in: int, channels_out: int, hidden_size: int) -> None: ...
    def forward(self, x: torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor, torch.Tensor, torch.Tensor]: ...

class Decoder(BaseNet):
    conv_layers: Incomplete
    def __init__(self, channels_in: int, channels_out: int, hidden_size: int) -> None: ...
    def crop(self, encoder_layer: torch.Tensor, decoder_layer: torch.Tensor) -> torch.Tensor: ...
    def forward(self, x: Tuple[torch.Tensor, torch.Tensor, torch.Tensor, torch.Tensor]) -> torch.Tensor: ...

class UNet(BaseNet):
    encoder: Incomplete
    decoder: Incomplete
    def __init__(self, channels_in: int, channels_out: int, hidden_size: int) -> None: ...
    def forward(self, x: torch.Tensor) -> torch.Tensor: ...
    def train_with_configs(self, configs: dict) -> None: ...
    def eval_with_configs(self, configs: dict) -> Tuple[float, List[torch.Tensor]]: ...

class DownConvLayers(torch.nn.Module):
    conv1: Incomplete
    conv2: Incomplete
    conv3: Incomplete
    conv4: Incomplete
    conv5: Incomplete
    def __init__(self, gnn_configs: dict) -> None: ...
    def forward(self, x: torch.Tensor, edge_index: torch.Tensor) -> torch.Tensor: ...

class UpConvLayers(torch.nn.Module):
    upconv1: Incomplete
    upconv2: Incomplete
    upconv3: Incomplete
    upconv4: Incomplete
    upconv5: Incomplete
    def __init__(self, gnn_configs: dict) -> None: ...
    def forward(self, x: torch.Tensor, edge_index: torch.Tensor) -> torch.Tensor: ...

class GCNConvLayers(torch.nn.Module):
    down_conv_layers: Incomplete
    up_conv_layers: Incomplete
    def __init__(self, gnn_configs: dict) -> None: ...
    def forward(self, x: torch.Tensor, edge_index: torch.Tensor) -> torch.Tensor: ...

class TopKPoolingLayer(torch.nn.Module):
    pool: Incomplete
    def __init__(self, gnn_configs: dict) -> None: ...
    def forward(self, x: torch.Tensor, edge_index: torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor]: ...

class GNNModel(torch.nn.Module):
    conv_layers: Incomplete
    pool_layer: Incomplete
    activation: Incomplete
    def __init__(self, gnn_configs: dict) -> None: ...
    def forward(self, data: Data) -> torch.Tensor: ...
    def train_with_configs(self, configs: dict) -> None: ...
    def eval_with_configs(self, configs: dict) -> tuple[float, List[torch.Tensor]]: ...
    def test_me(self) -> None: ...
